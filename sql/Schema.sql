CREATE TABLE IF NOT EXISTS users (
  full_name VARCHAR(64) NOT NULL,
  username VARCHAR(32) UNIQUE NOT NULL,
  email VARCHAR(64) PRIMARY KEY,
  phone_number VARCHAR(64) NOT NULL,
  password VARCHAR(128) NOT NULL,
  type VARCHAR(64) NOT NULL
);

CREATE TABLE IF NOT EXISTS member (
  email VARCHAR(64) REFERENCES users(email)
  ON UPDATE CASCADE 
  ON DELETE CASCADE
  DEFERRABLE INITIALLY DEFERRED
);

CREATE TABLE IF NOT EXISTS administrator (
  email VARCHAR(64) REFERENCES users (email)
  ON UPDATE CASCADE
  ON DELETE CASCADE
  DEFERRABLE INITIALLY DEFERRED
);

CREATE TABLE IF NOT EXISTS category (
  category VARCHAR(32) PRIMARY KEY
);

CREATE TABLE IF NOT EXISTS activity (
  activity_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  inviter VARCHAR(64) REFERENCES users(email)
  ON UPDATE CASCADE ON DELETE CASCADE
  DEFERRABLE INITIALLY DEFERRED,
  category VARCHAR(32) REFERENCES category(category),
  activity_name VARCHAR(128) NOT NULL,
  start_date_time DATE NOT NULL,
  end_date_time DATE NOT NULL CHECK (start_date_time <= end_date_time),
  venue VARCHAR(128) NOT NULL,
  capacity INTEGER NOT NULL CHECK (capacity >= 0)
);

CREATE TABLE IF NOT EXISTS joins (
  activity_id INT REFERENCES activity(activity_id),
  participant VARCHAR(64) REFERENCES users(email),
  rating FLOAT(5) CHECK (rating >= 1 AND rating <= 5),
  PRIMARY KEY (activity_id,participant)
);

CREATE TABLE IF NOT EXISTS review (
  activity_id INT REFERENCES activity(activity_id),
  timestamp TIME NOT NULL,
  participant VARCHAR(64) REFERENCES users(email),
  comment VARCHAR(4096) NOT NULL,
  PRIMARY KEY (activity_id,timestamp,participant)
);

CREATE TABLE IF NOT EXISTS report (
  submitter VARCHAR(64) REFERENCES users(email),
  timestamp TIME NOT NULL,
  report_user VARCHAR(64) REFERENCES users(email),
  comment VARCHAR(4096) NOT NULL,
  severity VARCHAR(6) NOT NULL CHECK (severity = 'low' OR severity = 'medium' OR severity = 'high'),
  PRIMARY KEY (submitter,timestamp)
);

CREATE TABLE IF NOT EXISTS random_comments (
	comment VARCHAR(500) PRIMARY KEY UNIQUE
);